{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API to access and configure the app template",
    "title" : "App template API",
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about the app template",
    "url" : "https://github.com/eliona-smart-building-assistant/app-template"
  },
  "servers" : [ {
    "url" : "http://template/v1"
  } ],
  "tags" : [ {
    "description" : "Configure the app",
    "externalDocs" : {
      "url" : "https://github.com/eliona-smart-building-assistant/app-template"
    },
    "name" : "Configuration"
  }, {
    "description" : "API version",
    "externalDocs" : {
      "url" : "https://github.com/eliona-smart-building-assistant/app-template"
    },
    "name" : "Version"
  }, {
    "description" : "Help to customize Eliona environment",
    "externalDocs" : {
      "url" : "https://github.com/eliona-smart-building-assistant/app-template"
    },
    "name" : "Customization"
  } ],
  "paths" : {
    "/configurations" : {
      "get" : {
        "description" : "Gets information about all configurations.",
        "operationId" : "getConfigurations",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Configuration"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Successfully returned all configurations"
          }
        },
        "summary" : "Get configurations",
        "tags" : [ "Configuration" ]
      },
      "post" : {
        "description" : "Creates a configuration.",
        "operationId" : "postConfiguration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Configuration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Configuration"
                }
              }
            },
            "description" : "Successfully created a configuration"
          }
        },
        "summary" : "Creates a configuration",
        "tags" : [ "Configuration" ]
      }
    },
    "/version" : {
      "get" : {
        "description" : "Gets information about the APIs version.",
        "operationId" : "getVersion",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Successfully returned the APIs version."
          }
        },
        "summary" : "Version of the API",
        "tags" : [ "Version" ]
      }
    },
    "/version/openapi.json" : {
      "get" : {
        "description" : "Gets specification for this API version as an openapi.json file.",
        "operationId" : "getOpenAPI",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Successfully returned the openapi.json file."
          }
        },
        "summary" : "OpenAPI specification for this API version",
        "tags" : [ "Version" ]
      }
    },
    "/dashboard-templates/{dashboard-template-name}" : {
      "get" : {
        "description" : "Delivers a dashboard template which can assigned to users in Eliona",
        "externalDocs" : {
          "description" : "The API to assign the dashboard to users in Eliona (see post /dashboards endpoint).",
          "url" : "https://github.com/eliona-smart-building-assistant/eliona-api"
        },
        "operationId" : "getDashboardTemplateByName",
        "parameters" : [ {
          "description" : "Name of the dashboard template",
          "explode" : false,
          "in" : "path",
          "name" : "dashboard-template-name",
          "required" : true,
          "schema" : {
            "example" : "Template",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Define the project the dashboard should be",
          "explode" : true,
          "in" : "query",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "example" : "99",
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            },
            "description" : "Successfully returned dashboard template"
          },
          "404" : {
            "description" : "Template name not found"
          }
        },
        "summary" : "Get a full dashboard template",
        "tags" : [ "Customization" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Configuration" : {
        "description" : "Simply a example configuration",
        "properties" : {
          "id" : {
            "description" : "A id identifying the example configuration",
            "format" : "int64",
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "config" : {
            "description" : "Configuration data for example",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Dashboard" : {
        "description" : "A frontend dashboard",
        "example" : {
          "sequence" : 1,
          "name" : "Weather info",
          "id" : 4711,
          "widgets" : [ {
            "sequence" : 1,
            "data" : [ {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            }, {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            } ],
            "assetId" : 4711,
            "details" : { },
            "id" : 4711,
            "widgetTypeName" : "Weather"
          }, {
            "sequence" : 1,
            "data" : [ {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            }, {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            } ],
            "assetId" : 4711,
            "details" : { },
            "id" : 4711,
            "widgetTypeName" : "Weather"
          } ],
          "projectId" : "99",
          "userId" : "42"
        },
        "properties" : {
          "id" : {
            "description" : "The internal Id of dashboard",
            "example" : 4711,
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "name" : {
            "description" : "The name for this dashboard",
            "example" : "Weather info",
            "type" : "string"
          },
          "projectId" : {
            "description" : "ID of the project to which the dashboard belongs",
            "example" : "99",
            "type" : "string"
          },
          "userId" : {
            "description" : "ID of the user who owns the dashboard",
            "example" : "42",
            "type" : "string"
          },
          "sequence" : {
            "default" : 0,
            "description" : "The sequence of the dashboard",
            "example" : 1,
            "nullable" : true,
            "type" : "integer"
          },
          "widgets" : {
            "description" : "List of widgets on this dashboard (order matches the order of widgets on the dashboard)",
            "items" : {
              "$ref" : "#/components/schemas/Widget"
            },
            "nullable" : true,
            "type" : "array"
          }
        },
        "required" : [ "name", "projectId", "userId" ],
        "type" : "object"
      },
      "Widget" : {
        "description" : "A widget on a frontend dashboard",
        "example" : {
          "sequence" : 1,
          "data" : [ {
            "elementSequence" : 1,
            "data" : {
              "subtype" : "input",
              "attribute" : "temperature",
              "key" : "humidity"
            },
            "assetId" : 4711,
            "id" : 4711
          }, {
            "elementSequence" : 1,
            "data" : {
              "subtype" : "input",
              "attribute" : "temperature",
              "key" : "humidity"
            },
            "assetId" : 4711,
            "id" : 4711
          } ],
          "assetId" : 4711,
          "details" : { },
          "id" : 4711,
          "widgetTypeName" : "Weather"
        },
        "properties" : {
          "id" : {
            "description" : "The internal Id of widget",
            "example" : 4711,
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "widgetTypeName" : {
            "description" : "The name for the type of this widget",
            "example" : "Weather",
            "type" : "string"
          },
          "details" : {
            "description" : "Detailed configuration depending on the widget type",
            "example" : { },
            "nullable" : true,
            "type" : "object"
          },
          "assetId" : {
            "description" : "The master asset id of this widget",
            "example" : 4711,
            "nullable" : true,
            "type" : "integer"
          },
          "sequence" : {
            "description" : "Placement order on dashboard; if not set the index in array is taken",
            "example" : 1,
            "nullable" : true,
            "type" : "integer"
          },
          "data" : {
            "description" : "List of data for the elements of widget",
            "items" : {
              "$ref" : "#/components/schemas/WidgetData"
            },
            "nullable" : true,
            "type" : "array"
          }
        },
        "required" : [ "widgetTypeName", "width" ],
        "type" : "object"
      },
      "WidgetData" : {
        "description" : "Data for a widget",
        "example" : {
          "elementSequence" : 1,
          "data" : {
            "subtype" : "input",
            "attribute" : "temperature",
            "key" : "humidity"
          },
          "assetId" : 4711,
          "id" : 4711
        },
        "properties" : {
          "id" : {
            "description" : "The internal Id of widget data",
            "example" : 4711,
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "elementSequence" : {
            "description" : "Position of the element in widget type",
            "example" : 1,
            "nullable" : true,
            "type" : "integer"
          },
          "assetId" : {
            "description" : "The master asset id of this widget",
            "example" : 4711,
            "nullable" : true,
            "type" : "integer"
          },
          "data" : {
            "description" : "individual config parameters depending on category",
            "example" : {
              "subtype" : "input",
              "attribute" : "temperature",
              "key" : "humidity"
            },
            "nullable" : true,
            "type" : "object"
          }
        },
        "type" : "object"
      }
    }
  }
}