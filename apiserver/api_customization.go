/*
 * App template API
 *
 * API to access and configure the app template
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomizationAPIController binds http requests to an api service and writes the service results to the http response
type CustomizationAPIController struct {
	service      CustomizationAPIServicer
	errorHandler ErrorHandler
}

// CustomizationAPIOption for how the controller is set up.
type CustomizationAPIOption func(*CustomizationAPIController)

// WithCustomizationAPIErrorHandler inject ErrorHandler into controller
func WithCustomizationAPIErrorHandler(h ErrorHandler) CustomizationAPIOption {
	return func(c *CustomizationAPIController) {
		c.errorHandler = h
	}
}

// NewCustomizationAPIController creates a default api controller
func NewCustomizationAPIController(s CustomizationAPIServicer, opts ...CustomizationAPIOption) Router {
	controller := &CustomizationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomizationAPIController
func (c *CustomizationAPIController) Routes() Routes {
	return Routes{
		"GetDashboardTemplateByName": Route{
			strings.ToUpper("Get"),
			"/v1/dashboard-templates/{dashboard-template-name}",
			c.GetDashboardTemplateByName,
		},
	}
}

// GetDashboardTemplateByName - Get a full dashboard template
func (c *CustomizationAPIController) GetDashboardTemplateByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	dashboardTemplateNameParam := params["dashboard-template-name"]
	if dashboardTemplateNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"dashboard-template-name"}, nil)
		return
	}
	var projectIdParam string
	if query.Has("projectId") {
		param := query.Get("projectId")

		projectIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "projectId"}, nil)
		return
	}
	result, err := c.service.GetDashboardTemplateByName(r.Context(), dashboardTemplateNameParam, projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
